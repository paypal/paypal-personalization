{"version":3,"sources":["webpack://@paypal/personalization/webpack/universalModuleDefinition","webpack://@paypal/personalization/webpack/bootstrap","webpack://@paypal/personalization/./src/config.js","webpack://@paypal/personalization/./node_modules/cross-domain-utils/src/utils.js","webpack://@paypal/personalization/./node_modules/cross-domain-utils/src/constants.js","webpack://@paypal/personalization/./src/domains.js","webpack://@paypal/personalization/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@paypal/personalization/./node_modules/zalgo-promise/src/utils.js","webpack://@paypal/personalization/./node_modules/zalgo-promise/src/exceptions.js","webpack://@paypal/personalization/./node_modules/zalgo-promise/src/flush.js","webpack://@paypal/personalization/./node_modules/zalgo-promise/src/promise.js","webpack://@paypal/personalization/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://@paypal/personalization/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://@paypal/personalization/./node_modules/belter/src/util.js","webpack://@paypal/personalization/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://@paypal/personalization/./node_modules/belter/src/dom.js","webpack://@paypal/personalization/./node_modules/belter/src/constants.js","webpack://@paypal/personalization/./node_modules/belter/src/http.js","webpack://@paypal/personalization/./node_modules/beaver-logger/src/constants.js","webpack://@paypal/personalization/./node_modules/beaver-logger/src/config.js","webpack://@paypal/personalization/./node_modules/beaver-logger/src/util.js","webpack://@paypal/personalization/./node_modules/beaver-logger/src/logger.js","webpack://@paypal/personalization/./node_modules/beaver-logger/src/http.js","webpack://@paypal/personalization/./src/logger.js","webpack://@paypal/personalization/./src/graphql.js","webpack://@paypal/personalization/./src/personalization.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","SUPPORTED_BROWSERS","msie","firefox","chrome","safari","opera","msedge","samsungBrowser","silk","ucbrowser","vivaldi","SANDBOX_ALIAS","CLIENT_ID_ALIAS","sandbox","sb","test","URI","GRAPHQL","LOGGER","IE_WIN_ACCESS_ERROR","getActualProtocol","win","window","location","protocol","getProtocol","mockDomain","split","isAboutProtocol","canReadFromWindow","err","getActualDomain","Error","PROTOCOL","parent","getParent","host","getDomain","domain","indexOf","isSameDomain","desc","getOwnPropertyDescriptor","isMockProtocol","isActuallySameDomain","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","top","iframeIndex","collection","item","length","safeIndexOf","frame","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","isWindow","obj","toString","Window","__cross_domain_utils_window_check__","buildPayPalUrl","path","__PAYPAL_DOMAIN__","getPayPalLoggerUrl","_extends","assign","target","arguments","source","apply","isPromise","Promise","constructor","then","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","dispatch","setTimeout","push","j","dispatchPossiblyUnhandledError","asyncReject","chain","firstPromise","secondPromise","onSuccess","onError","promiseResult","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","lazy","all","promises","count","results","slice","prom","hash","awaitPromises","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","objectIDs","CrossDomainSafeWeakMap","weakmap","keys","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","getFunctionName","fn","__name__","displayName","setFunctionName","uniqueID","chars","replace","charAt","floor","str","btoa","encodeURIComponent","p1","String","fromCharCode","parseInt","Buffer","from","base64encode","Date","toISOString","toLowerCase","serializeArgs","JSON","stringify","Array","subkey","val","uid","getObjectID","getEmptyObject","memoizeGlobalIndex","memoizeGlobalIndexValidFrom","memoize","options","simpleCache","thisCache","thisNamespace","cacheTime","memoizeIndex","memoizedFunction","cache","cacheKey","cacheResult","now","reset","noop","stringifyError","level","newErr","objFilter","filter","Boolean","isDocumentReady","document","body","readyState","isDocumentInteractive","isBrowser","clear","interval","setInterval","clearInterval","currentScript","getCurrentScript","getStackTrace","stackDetails","exec","scriptLocation","getElementsByTagName","reverse","script","src","inferCurrentScript","currentUID","getAttribute","ATTRIBUTES","hashedString","total","charCodeAt","abs","strHashStr","dataset","setAttribute","headerBuilders","request","url","headers","json","data","normalizedHeaders","builtHeaders","headerBuilder","xhr","XMLHttpRequest","addEventListener","responseHeaders","rawHeaders","trim","join","parseHeaders","getAllResponseHeaders","status","contentType","isJSON","responseBody","responseText","parse","evt","open","setRequestHeader","ontimeout","send","AUTO_FLUSH_LEVEL","LOG_LEVEL_PRIORITY","sendBeacon","useBlob","navigator","blob","Blob","type","e","extendIfDefined","Logger","prefix","logLevel","transport","httpWin","assertSameDomain","enableSendBeacon","beaconResult","hasHeaders","canUseSendBeacon","isAmplitude","getHTTPTransport","amplitudeApiKey","flushInterval","events","tracking","payloadBuilders","metaBuilders","trackingBuilders","print","event","payload","console","log","warning","immediateFlush","meta","builder","api_key","event_type","transition_name","event_properties","localPromise","logger","logPayload","timestamp","enqueue","addBuilder","builders","loop","safeInterval","debug","info","warn","track","trackingPayload","addPayloadBuilder","addMetaBuilder","addTrackingBuilder","addHeaderBuilder","setTransport","newTransport","configure","opts","getLogger","LocationType","callGraphQL","query","variables","errors","getPersonalizations","mlContext","eligibility","extra","clientId","locale","buyerCountry","currency","intent","commit","vault","ip","buyerIp","cookies","userAgent","buttonSessionID","renderedButtons","label","period","taglineEnabled","layout","buttonSize","gqlResult","checkoutCustomization","personalization","personalizations","forEach","experiment","treatment","html","markup","selector","INNER","css","js","fetchPersonalizations"],"mappings":"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","file":"@paypal/personalization.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@paypal/personalization\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@paypal/personalization\"] = factory();\n\telse\n\t\troot[\"@paypal/personalization\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* @flow */\n\nexport const SUPPORTED_BROWSERS = {\n    msie:           '11',\n    firefox:        '30',\n    chrome:         '27',\n    safari:         '7',\n    opera:          '16',\n    msedge:         '12',\n    samsungBrowser: '2.1',\n    silk:           '59.3',\n    ucbrowser:      '10.0.0.488',\n    vivaldi:        '1.91'\n};\n\nconst SANDBOX_ALIAS = 'AZDxjDScFpQtjWTOUtWKbyN_bDt4OgqaF4eYXlewfBP4-8aqX3PiV8e1GWU6liB2CUXlkA59kJXE7M6R';\n\nexport const CLIENT_ID_ALIAS = {\n    sandbox:    SANDBOX_ALIAS,\n    sb:         SANDBOX_ALIAS,\n    test:       SANDBOX_ALIAS\n};\n\nexport const URI = {\n    GRAPHQL: '/graphql',\n    LOGGER:      `/xoplatform/logger/api/logger`\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nconst IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function getActualProtocol(win : SameDomainWindowType = window) : ?string {\n    return win.location.protocol;\n}\n\nexport function getProtocol(win : SameDomainWindowType = window) : ?string {\n    if (win.mockDomain) {\n        const protocol = win.mockDomain.split('//')[0];\n\n        if (protocol) {\n            return protocol;\n        }\n    }\n\n    return getActualProtocol(win);\n}\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return getProtocol(win) === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return getProtocol(win) === PROTOCOL.ABOUT;\n}\n\nexport function isMockProtocol(win : SameDomainWindowType = window) : boolean {\n    return getProtocol(win) === PROTOCOL.MOCK;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win? : SameDomainWindowType = window) : string {\n\n    const location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    const protocol = getActualProtocol(win);\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        const parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    const host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win? : SameDomainWindowType = window) : string {\n\n    const domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        const desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isMockProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n        if (win === window) {\n            return true;\n        }\n        \n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n\n    const result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    const childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n\n    const result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n\n    const result = [];\n\n    for (const frame of getFrames(win)) {\n        result.push(frame);\n\n        for (const childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (const frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    const opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n    const top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    let result = [ ...getAllChildFrames(top), top ];\n\n    // Win may be in shadow dom\n    if (result.indexOf(win) === -1) {\n        result = [ ...result, win, ...getAllChildFrames(win) ];\n    }\n\n    return result;\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    const frames = getAllFramesInWindow(win);\n    const opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    const doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        let parent = frame;\n\n        while (parent.parentNode && parent.parentNode !== parent) {\n            parent = parent.parentNode;\n        }\n\n        // $FlowFixMe\n        if (!parent.host || !doc.documentElement.contains(parent.host)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : $ReadOnlyArray<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nconst iframeWindows = [];\nconst iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    const iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        const frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    const winFrames = getFrames(win);\n\n    for (const childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    const frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (const childFrame of getFrames(win)) {\n        const namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n    const frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    const top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    const frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (const childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    const opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    const parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n\n    const results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    const actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (const frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getOpener(win));\n}\n\nexport function isIframe(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getParent(win));\n}\n\nexport function isFullpage(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(!isIframe(win) && !isPopup(win));\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (const item1 of collection1) {\n        for (const item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    const top1 = getTop(win1) || win1;\n    const top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    const allFrames1 = getAllFramesInWindow(win1);\n    const allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    const opener1 = getOpener(top1);\n    const opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() })`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : {| cancel : () => void |} {\n\n    let timeout;\n\n    const check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        // $FlowFixMe method-unbinding\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if ('postMessage' in obj && 'self' in obj && 'location' in obj) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function getFrameForWindow(win : CrossDomainWindowType) : ?HTMLElement {\n    if (isSameDomain(win)) {\n        return assertSameDomain(win).frameElement;\n    }\n\n    for (const frame of document.querySelectorAll('iframe')) {\n        if (frame && frame.contentWindow && frame.contentWindow === win) {\n            return frame;\n        }\n    }\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    if (isIframe(win)) {\n        const frame = getFrameForWindow(win);\n        if (frame && frame.parentElement) {\n            frame.parentElement.removeChild(frame);\n            return;\n        }\n    }\n\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n\nimport { getActualDomain } from 'cross-domain-utils/src';\n\nimport { URI } from './config';\n\nexport function buildPayPalUrl(path : string = '') : string {\n    return (__TEST__ && __WEB__)\n        ? `${ getActualDomain() }${ path }`\n        : `${ __PAYPAL_DOMAIN__ }${ path }`;\n}\n\nexport function getPayPalLoggerUrl() : string {\n    return buildPayPalUrl(URI.LOGGER);\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.Window === 'function' && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.constructor === 'function' && item instanceof window.constructor) {\n            return false;\n        }\n\n        const toString = ({}).toString;\n\n        if (toString) {\n            const name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : {| cancel : () => void |} {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    const promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    // eslint-disable-next-line flowtype/no-mutable-array\n    handlers : Array<{|\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    |}>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            const err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        const { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        const chain = <T>(firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                secondPromise.resolve(res);\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            const { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                const promiseResult : ZalgoPromise<*> = result;\n\n                if (promiseResult.resolved) {\n                    promise.resolve(promiseResult.value);\n                } else {\n                    promise.reject(promiseResult.error);\n                }\n\n                promiseResult.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    chain(result, promise);\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X, Y>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        const promise = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X, Y>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        // $FlowFixMe incompatible-call\n        const resultPromise : ZalgoPromise<X | Y> = this.then(undefined, onError);\n        return resultPromise;\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        const timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    lazy() : ZalgoPromise<R> {\n        this.errorHandled = true;\n        return this;\n    }\n\n    static resolve<X, Y>(value : ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n\n        if (value instanceof ZalgoPromise) {\n            // $FlowFixMe incompatible-type-arg\n            const result : ZalgoPromise<X | Y> = value;\n            return result;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : $ReadOnlyArray<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        const promise = new ZalgoPromise();\n        let count = promises.length;\n        // eslint-disable-next-line no-undef\n        const results = ([] : $TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>).slice();\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        const chain = <T>(i : number, firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                results[i] = res;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < promises.length; i++) {\n            const prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            chain(i, ZalgoPromise.resolve(prom), promise);\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        const result = {};\n        const awaitPromises = [];\n\n        for (const key in promises) {\n            if (promises.hasOwnProperty(key)) {\n                const value = promises[key];\n\n                if (isPromise(value)) {\n                    awaitPromises.push(value.then(res => {\n                        result[key] = res;\n                    }));\n                } else {\n                    result[key] = value;\n                }\n            }\n        }\n        \n        return ZalgoPromise.all(awaitPromises).then(() => result);\n    }\n\n    static map<T, X>(items : $ReadOnlyArray<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<$ReadOnlyArray<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : {| cancel : () => void |} {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X, Y, C : mixed, A : $ReadOnlyArray<mixed>>(method : (...args : $ReadOnlyArray<mixed>) => (ZalgoPromise<X> | Y), context? : C, args? : A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result : ZalgoPromise<X> | Y;\n\n        startActive();\n        \n        try {\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        // $FlowFixMe incompatible-call\n        const resultPromise = ZalgoPromise.resolve(result);\n\n        return resultPromise;\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : $ReadOnlyArray<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : $ReadOnlyArray<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : ?WeakMap<K, V>\n    // eslint-disable-next-line flowtype/no-mutable-array\n    keys : Array<K>\n    // eslint-disable-next-line flowtype/no-mutable-array\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        const weakmap = this.weakmap;\n        const keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            const value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        const weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                const name = this.name;\n                const entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        const keys = this.keys;\n        const values = this.values;\n        const index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        const weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                const entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        const keys = this.keys;\n        const index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        const weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                const entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        const keys = this.keys;\n        const index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        const weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                const entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        const index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        const value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","\n/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function getFunctionName <T : Function>(fn : T) : string {\n    return fn.name || fn.__name__ || fn.displayName || 'anonymous';\n}\n\nexport function setFunctionName <T : Function>(fn : T, name : string) : T {\n    try {\n        delete fn.name;\n        fn.name = name;\n    } catch (err) {\n        // pass\n    }\n\n    fn.__name__ = fn.displayName = name;\n    return fn;\n}\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        })).replace(/[=]/g, '');\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64').replace(/[=]/g, '');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        // $FlowFixMe[method-unbinding]\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    const chars = '0123456789abcdef';\n\n    const randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    const timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `uid_${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : $ReadOnlyArray<T>) : string {\n    try {\n        // $FlowFixMe[method-unbinding]\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\n\nexport function getEmptyObject() : {||} {\n    // $FlowFixMe\n    return {};\n}\n\ntype MemoizeOptions = {|\n    name? : string,\n    time? : number,\n    thisNamespace? : boolean\n|};\n\nconst getDefaultMemoizeOptions = () : MemoizeOptions => {\n    // $FlowFixMe\n    return {};\n};\n\nexport type Memoized<F> = F & {| reset : () => void |};\n\nlet memoizeGlobalIndex = 0;\nlet memoizeGlobalIndexValidFrom = 0;\n\nexport function memoize<F : Function>(method : F, options? : MemoizeOptions = getDefaultMemoizeOptions()) : Memoized<F> {\n    const { thisNamespace = false, time: cacheTime } = options;\n\n    let simpleCache;\n    let thisCache;\n\n    let memoizeIndex = memoizeGlobalIndex;\n    memoizeGlobalIndex += 1;\n\n    const memoizedFunction = function memoizedFunction(...args) : mixed {\n        if (memoizeIndex < memoizeGlobalIndexValidFrom) {\n            simpleCache = null;\n            thisCache = null;\n            memoizeIndex = memoizeGlobalIndex;\n            memoizeGlobalIndex += 1;\n        }\n\n        let cache;\n\n        if (thisNamespace) {\n            thisCache = thisCache || new WeakMap();\n            cache = thisCache.getOrSet(this, getEmptyObject);\n        } else {\n            cache = simpleCache = simpleCache || {};\n        }\n\n        const cacheKey = serializeArgs(args);\n        let cacheResult = cache[cacheKey];\n\n        if (cacheResult && cacheTime && (Date.now() - cacheResult.time) < cacheTime) {\n            delete cache[cacheKey];\n            cacheResult = null;\n        }\n\n        if (cacheResult) {\n            return cacheResult.value;\n        }\n\n        const time  = Date.now();\n        const value = method.apply(this, arguments);\n\n        cache[cacheKey] = { time, value };\n\n        return value;\n    };\n\n    memoizedFunction.reset = () => {\n        simpleCache = null;\n        thisCache = null;\n    };\n\n    // $FlowFixMe\n    const result : F = memoizedFunction;\n\n    return setFunctionName(result, `${ options.name || getFunctionName(method) }::memoized`);\n}\n\nmemoize.clear = () => {\n    memoizeGlobalIndexValidFrom = memoizeGlobalIndex;\n};\n\nexport function promiseIdentity<T : mixed>(item : ZalgoPromise<T> | T) : ZalgoPromise<T> {\n    // $FlowFixMe\n    return ZalgoPromise.resolve(item);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : $ReadOnlyArray<any>) : ZalgoPromise<R> {\n        const key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return setFunctionName(memoizedPromiseFunction, `${ getFunctionName(method) }::promiseMemoized`);\n}\n\ntype PromisifyOptions = {|\n    name ? : string\n|};\n\nconst getDefaultPromisifyOptions = () : PromisifyOptions => {\n    // $FlowFixMe\n    return {};\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : $ReadOnlyArray<any>) => R, options : PromisifyOptions = getDefaultPromisifyOptions()) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return setFunctionName(promisifiedFunction, `${ getFunctionName(method) }::promisified`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : $ReadOnlyArray<any>) => R, logic : (...args : $ReadOnlyArray<any>) => R, args : $ReadOnlyArray<any> = []) : R {\n    // $FlowFixMe\n    const cache : {| [string] : R |} = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    const key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    const result = cache[key] = logic(...args);\n\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : $ReadOnlyArray<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    const onceFunction = function() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n\n    return setFunctionName(onceFunction, `${ getFunctionName(method) }::once`);\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    const regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : T {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            // $FlowFixMe[method-unbinding]\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            const stack = err && err.stack;\n            const message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        // $FlowFixMe[method-unbinding]\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) {\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    // $FlowFixMe[method-unbinding]\n    const defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    // $FlowFixMe[method-unbinding]\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    const index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    const original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            // $FlowFixMe[method-unbinding]\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : $ReadOnlyArray<T> {\n    if (Object.values) {\n        // $FlowFixMe\n        return Object.values(obj);\n    }\n\n    const result : Array<T> = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            // $FlowFixMe[escaped-generic]\n            result.push(obj[key]);\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n\n// eslint-disable-next-line no-undef\nexport const memoizedValues : <T>({ [string] : T }) => $ReadOnlyArray<T> = memoize(values);\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : $ReadOnlyArray<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : $ReadOnlyArray<number>) : number {\n    return Math.max(...args);\n}\n\nexport function roundUp(num : number, nearest : number) : number {\n    const remainder = num % nearest;\n    return remainder\n        ? (num - remainder) + nearest\n        : num;\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : $ReadOnlyArray<T> {\n    const results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    const result = {};\n\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : $ReadOnlyArray<string> {\n    const result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    const promiseDebounced = function() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        const localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n\n    return setFunctionName(promiseDebounced, `${ getFunctionName(method) }::promiseDebounced`);\n}\n\nexport function safeInterval(method : Function, time : number) : {| cancel : () => void |} {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    const result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, -2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        const parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            const isLast = (i + 1 === parts.length);\n            const isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {|\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    reset : () => void\n|};\n\nexport function eventEmitter() : EventEmitterType {\n    const triggered = {};\n    let handlers = {};\n\n    const emitter = {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            const handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            const listener = emitter.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            const handlerList = handlers[eventName];\n            const promises = [];\n\n            if (handlerList) {\n                for (const handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return emitter.trigger(eventName, ...args);\n        },\n\n        reset() {\n            handlers = {};\n        }\n    };\n\n    return emitter;\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    const pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    const interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | $ReadOnlyArray<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            const value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : $ReadOnlyArray<T> { // eslint-disable-line no-undef\n    // $FlowFixMe[method-unbinding]\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    // $FlowFixMe[method-unbinding]\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    const constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    const prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : $ReadOnlyArray<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        const length = item.length;\n        const result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                const itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                const el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        const result = {};\n\n        for (const key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                const itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                const el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        const descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {|\n    text : string,\n    groups : $ReadOnlyArray<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n|};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    const result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    const index : number = result.index;\n    const regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : $ReadOnlyArray<RegexResultType> {\n\n    const matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : $ReadOnlyArray<mixed>) => T, time : number = 100) : (...args : $ReadOnlyArray<mixed>) => void {\n\n    let timeout;\n\n    const debounceWrapper = function() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n\n    return setFunctionName(debounceWrapper, `${ getFunctionName(method) }::debounced`);\n}\n\nexport function isRegex(item : mixed) : boolean {\n    // $FlowFixMe[method-unbinding]\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport const weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : $ReadOnlyArray<any>) => R) => {\n\n    const weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport const weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) => {\n\n    const weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            }));\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => {| cancel : () => void |},\n    all : (err? : mixed) => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n    let cleanErr;\n\n    const cleaner = {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                cleaner.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) : {| cancel : () => void |} {\n            const task = once(() => method(cleanErr));\n\n            if (cleaned) {\n                method(cleanErr);\n            } else {\n                tasks.push(task);\n            }\n\n            return {\n                cancel: () => {\n                    const index = tasks.indexOf(task);\n                    if (index !== -1) {\n                        tasks.splice(index, 1);\n                    }\n                }\n            };\n        },\n\n        all(err? : mixed) : ZalgoPromise<void> {\n            cleanErr = err;\n\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.shift();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n\n    return cleaner;\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\n// eslint-disable-next-line flowtype/no-mutable-array\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n\nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n\nexport const constHas = <X : (string | boolean | number), T : { [string] : X }>(constant : T, value : X) : boolean => {\n    return memoizedValues(constant).indexOf(value) !== -1;\n};\n\nexport function dedupeErrors<T>(handler : (mixed) => T) : (mixed) => (T | void) {\n    const seenErrors = [];\n    const seenStringifiedErrors = {};\n\n    return (err) => {\n        if (seenErrors.indexOf(err) !== -1) {\n            return;\n        }\n\n        seenErrors.push(err);\n\n        const stringifiedError = stringifyError(err);\n        if (seenStringifiedErrors[stringifiedError]) {\n            return;\n        }\n\n        seenStringifiedErrors[stringifiedError] = true;\n        return handler(err);\n    };\n}\n\nexport class ExtendableError extends Error {\n    constructor(message : string) {\n        super(message);\n        // eslint-disable-next-line unicorn/custom-error-definition\n        this.name = this.constructor.name;\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            this.stack = (new Error(message)).stack;\n        }\n    }\n}\n  \n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        const testWeakMap = new WeakMap();\n        const testKey = {};\n        const testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: off */\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed, assertSameDomain,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, memoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom, ExtendableError, strHashStr } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES, ATTRIBUTES, UID_HASH_LENGTH } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function getBody() : HTMLBodyElement {\n    // eslint-disable-next-line compat/compat\n    const body = document.body;\n\n    if (!body) {\n        throw new Error(`Body element not found`);\n    }\n\n    return body;\n}\n\nexport function isDocumentReady() : boolean {\n    // eslint-disable-next-line compat/compat\n    return Boolean(document.body) && (document.readyState === 'complete');\n}\n\nexport function isDocumentInteractive() : boolean {\n    // eslint-disable-next-line compat/compat\n    return Boolean(document.body) && (document.readyState === 'interactive');\n}\n\nexport function urlEncode(str : string) : string {\n    return encodeURIComponent(str);\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\ntype WaitForDocumentReady = () => ZalgoPromise<void>;\n\nexport const waitForDocumentReady : WaitForDocumentReady = memoize(() => {\n    return new ZalgoPromise(resolve => {\n\n        if (isDocumentReady() || isDocumentInteractive()) {\n            return resolve();\n        }\n\n        const interval = setInterval(() => {\n            if (isDocumentReady() || isDocumentInteractive()) {\n                clearInterval(interval);\n                return resolve();\n            }\n        }, 10);\n    });\n});\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return ZalgoPromise.try(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        return waitForDocumentReady().then(() => {\n            if (document.body) {\n                return document.body;\n            }\n\n            throw new Error('Document ready but document.body not present');\n        });\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        const params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport type Query = {\n    [ string ] : boolean | string\n};\n\nexport function formatQuery(obj : Query = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string' || typeof obj[key] === 'boolean';\n    }).map(key => {\n        const val = obj[key];\n\n        if (typeof val !== 'string' && typeof val !== 'boolean') {\n            throw new TypeError(`Invalid type for query`);\n        }\n\n        return `${ urlEncode(key) }=${ urlEncode(val.toString()) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : Query = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : {| query? : Query, hash? : Query |}) : string {\n\n    const query = options.query || {};\n    const hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    const queryString = extendQuery(originalQuery, query);\n    const hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    const meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function getPerformance() : ?Performance {\n    return inlineMemoize(getPerformance, () : ?Performance => {\n        const performance = window.performance;\n\n        if (\n            performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        ) {\n            return performance;\n        }\n    });\n}\n\nexport function enablePerformance() : boolean {\n    return Boolean(getPerformance());\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n        const performance = getPerformance();\n\n        if (!performance) {\n            return;\n        }\n\n        const timing = performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined') && window.location !== undefined;\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : $ReadOnlyArray<HTMLElement> {\n    // $FlowFixMe[method-unbinding]\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER || event.keyCode === KEY_CODES.SPACE) { // eslint-disable-line unicorn/prefer-event-key\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path, reverse = false } : {| host? : string, path : string, reverse? : boolean |}) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        const url = `${ host }${ path }`;\n        // $FlowFixMe[method-unbinding]\n        const scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        if (reverse) {\n            scripts.reverse();\n        }\n\n        for (const script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            const src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                const value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                const result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : $ReadOnlyArray<{| country? : string, lang : string |}> {\n    const nav = window.navigator;\n\n    const locales = nav.languages\n        ? [ ...nav.languages ]\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            const [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    const element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        const name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        const interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                resolve(el);\n                clearInterval(interval);\n                return;\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\n// eslint-disable-next-line unicorn/custom-error-definition\nexport class PopupOpenError extends ExtendableError {}\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1,\n    closeOnUnload? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    const { closeOnUnload = 1, name = '', width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    delete options.closeOnUnload;\n    delete options.name;\n\n    if (width && height) {\n        // $FlowFixMe\n        options = {\n            top,\n            left,\n            width,\n            height,\n            status:     1,\n            toolbar:    0,\n            menubar:    0,\n            resizable:  1,\n            scrollbars: 1,\n            ...options\n        };\n    }\n\n    // eslint-disable-next-line array-callback-return\n    const params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key] !== null && options[key] !== undefined) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        const err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    if (closeOnUnload) {\n        window.addEventListener('unload', () => win.close());\n    }\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    const tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    const documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {|\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?$ReadOnlyArray<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n|};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        const promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    const promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nconst getDefaultCreateElementOptions = () : ElementOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = getDefaultCreateElementOptions(), container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    const element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (const key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\ntype StringMap = {|\n    [ string ] : string\n|};\n\nexport type IframeElementOptionsType = {|\n    style? : StringMap,\n    class? : ?$ReadOnlyArray<string>,\n    attributes? : StringMap,\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n|};\n\nconst getDefaultIframeOptions = () : IframeElementOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nconst getDefaultStringMap = () : StringMap => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function iframe(options : IframeElementOptionsType = getDefaultIframeOptions(), container : ?HTMLElement) : HTMLIFrameElement {\n\n    const attributes = options.attributes || getDefaultStringMap();\n    const style = options.style || getDefaultStringMap();\n\n    // $FlowFixMe\n    const newAttributes = {\n        allowTransparency: 'true',\n        ...attributes\n    };\n\n    // $FlowFixMe\n    const newStyle = {\n        backgroundColor: 'transparent',\n        border:          'none',\n        ...style\n    };\n\n    const frame = createElement('iframe', {\n        attributes: newAttributes,\n        style:      newStyle,\n        html:       options.html,\n        class:      options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n\n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        const el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : $ReadOnlyArray<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (const eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (const eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    const capitalizedName = capitalizeFirstLetter(name);\n\n    for (const prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        const el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        // eslint-disable-next-line prefer-const\n        let startTimeout;\n        let endTimeout;\n        // eslint-disable-next-line prefer-const\n        let startEvent;\n        // eslint-disable-next-line prefer-const\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', 'hidden', 'important');\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', 'none', 'important');\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    const animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode || !el.ownerDocument || !el.ownerDocument.documentElement || !el.ownerDocument.documentElement.contains(el)) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let cancelled = false;\n    const mutationObservers = [];\n    // eslint-disable-next-line prefer-const\n    let interval;\n    // eslint-disable-next-line prefer-const\n    let sacrificialFrame;\n    let sacrificialFrameWin;\n\n    const cancel = () => {\n        cancelled = true;\n        for (const observer of mutationObservers) {\n            observer.disconnect();\n        }\n        if (interval) {\n            interval.cancel();\n        }\n        if (sacrificialFrameWin) {\n            // eslint-disable-next-line no-use-before-define\n            sacrificialFrameWin.removeEventListener('unload', elementClosed);\n        }\n        if (sacrificialFrame) {\n            destroyElement(sacrificialFrame);\n        }\n    };\n\n    const elementClosed = () => {\n        if (!cancelled) {\n            handler();\n            cancel();\n        }\n    };\n\n    if (isElementClosed(element)) {\n        elementClosed();\n        return { cancel };\n    }\n\n    // Strategy 1: Mutation observer\n\n    if (window.MutationObserver) {\n        let mutationElement = element.parentElement;\n        while (mutationElement) {\n            const mutationObserver = new window.MutationObserver(() => {\n                if (isElementClosed(element)) {\n                    elementClosed();\n                }\n            });\n\n            mutationObserver.observe(mutationElement, { childList: true });\n            mutationObservers.push(mutationObserver);\n            mutationElement = mutationElement.parentElement;\n        }\n    }\n\n    // Strategy 2: Sacrificial iframe\n\n    sacrificialFrame = document.createElement('iframe');\n    sacrificialFrame.setAttribute('name', `__detect_close_${ uniqueID() }__`);\n    sacrificialFrame.style.display = 'none';\n    awaitFrameWindow(sacrificialFrame).then(frameWin => {\n        sacrificialFrameWin = assertSameDomain(frameWin);\n        sacrificialFrameWin.addEventListener('unload', elementClosed);\n    });\n    element.appendChild(sacrificialFrame);\n\n    // Strategy 3: Poller\n\n    const check = () => {\n        if (isElementClosed(element)) {\n            elementClosed();\n        }\n    };\n    interval = safeInterval(check, 1000);\n\n    return { cancel };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (const script of querySelectorAll('script', el)) {\n        const parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        const newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({| width : number, height : number |}) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {| cancel : () => void |} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n    let canceled = false;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    const check = () => {\n        if (canceled || !isElementVisible(el)) {\n            return;\n        }\n\n        const newWidth = el.offsetWidth;\n        const newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    win.addEventListener('resize', check);\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n        timeout = safeInterval(check, interval * 10);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        timeout = safeInterval(check, interval * 10);\n    } else {\n        timeout = safeInterval(check, interval);\n    }\n\n    return {\n        cancel: () => {\n            canceled = true;\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            timeout.cancel();\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n    const performance = getPerformance();\n\n    if (!performance) {\n        return;\n    }\n\n    // $FlowFixMe[method-unbinding]\n    if (typeof performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n\nexport function isShadowElement(element : Node) : boolean {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    return element.toString() === '[object ShadowRoot]';\n}\n\nexport function getShadowRoot(element : Node) : ?Node {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    if (isShadowElement(element)) {\n        return element;\n    }\n}\n\nexport function getShadowHost(element : Node) : ?HTMLElement {\n    const shadowRoot = getShadowRoot(element);\n\n    // $FlowFixMe\n    if (shadowRoot && shadowRoot.host) {\n        // $FlowFixMe\n        return shadowRoot.host;\n    }\n}\n\n\nexport function insertShadowSlot(element : HTMLElement) : HTMLElement {\n    const shadowHost = getShadowHost(element);\n\n    if (!shadowHost) {\n        throw new Error(`Element is not in shadow dom`);\n    }\n\n    const slotName = `shadow-slot-${ uniqueID() }`;\n    const slot = document.createElement('slot');\n    slot.setAttribute('name', slotName);\n    element.appendChild(slot);\n\n    const slotProvider = document.createElement('div');\n    slotProvider.setAttribute('slot', slotName);\n    shadowHost.appendChild(slotProvider);\n\n    if (isShadowElement(shadowHost)) {\n        return insertShadowSlot(slotProvider);\n    }\n\n    return slotProvider;\n}\n\nexport function preventClickFocus(el : HTMLElement) {\n    const onFocus = (event : Event) => {\n        el.removeEventListener('focus', onFocus);\n        event.preventDefault();\n        el.blur();\n        return false;\n    };\n\n    el.addEventListener('mousedown', () => {\n        el.addEventListener('focus', onFocus);\n        setTimeout(() => {\n            el.removeEventListener('focus', onFocus);\n        }, 1);\n    });\n}\n\nexport function getStackTrace() : string {\n    try {\n        throw new Error('_');\n    }\n    catch (err) {\n        return err.stack || '';\n    }\n}\n\nfunction inferCurrentScript() : ?HTMLScriptElement {\n    try {\n        const stack = getStackTrace();\n        const stackDetails = (/.*at [^(]*\\((.*):(.+):(.+)\\)$/ig).exec(stack);\n        const scriptLocation = stackDetails && stackDetails[1];\n\n        if (!scriptLocation) {\n            return;\n        }\n\n        // $FlowFixMe[method-unbinding]\n        for (const script of Array.prototype.slice.call(document.getElementsByTagName('script')).reverse()) {\n            if (script.src && script.src === scriptLocation) {\n                return script;\n            }\n        }\n\n    } catch (err) {\n        // pass\n    }\n}\n\n// eslint-disable-next-line compat/compat\nlet currentScript = typeof document !== 'undefined' ? document.currentScript : null;\n\ntype GetCurrentScript = () => HTMLScriptElement;\n\nexport const getCurrentScript : GetCurrentScript = memoize(() => {\n    if (currentScript) {\n        return currentScript;\n    }\n\n    currentScript = inferCurrentScript();\n\n    if (currentScript) {\n        return currentScript;\n    }\n\n    throw new Error('Can not determine current script');\n});\n\nconst currentUID = uniqueID();\n\ntype GetCurrentScriptUID = () => string;\n\nexport const getCurrentScriptUID : GetCurrentScriptUID = memoize(() => {\n    let script;\n\n    try {\n        script = getCurrentScript();\n    } catch (err) {\n        return currentUID;\n    }\n\n    let uid = script.getAttribute(ATTRIBUTES.UID);\n\n    if (uid && typeof uid === 'string') {\n        return uid;\n    }\n\n    uid = script.getAttribute(`${ ATTRIBUTES.UID }-auto`);\n\n    if (uid && typeof uid === 'string') {\n        return uid;\n    }\n\n    if (script.src) {\n\n        const { src, dataset } = script;\n        const stringToHash = JSON.stringify({ src, dataset });\n        const hashedString = strHashStr(stringToHash);\n        const hashResult = hashedString.slice(hashedString.length - UID_HASH_LENGTH);\n\n        uid = `uid_${ hashResult }`;\n    } else {\n        uid = uniqueID();\n    }\n\n    script.setAttribute(`${ ATTRIBUTES.UID }-auto`, uid);\n\n    return uid;\n});\n\ntype SubmitFormOptions = {|\n    url : string,\n    target : string,\n    body? : {| [string] : string | boolean |},\n    method? : string\n|};\n\nexport function submitForm({ url, target, body, method = 'post' } : SubmitFormOptions) {\n    const form = document.createElement('form');\n    form.setAttribute('target', target);\n    form.setAttribute('method', method);\n    form.setAttribute('action', url);\n    form.style.display = 'none';\n\n    if (body) {\n        for (const key of Object.keys(body)) {\n            const input = document.createElement('input');\n            input.setAttribute('name', key);\n            input.setAttribute('value', body[key]?.toString());\n            form.appendChild(input);\n        }\n    }\n\n    getBody().appendChild(form);\n    form.submit();\n    getBody().removeChild(form);\n}\n","/* @flow */\n\nexport const KEY_CODES = {\n    ENTER: 13,\n    SPACE: 32\n};\n\nexport const ATTRIBUTES = {\n    UID: 'data-uid'\n};\n\nexport const UID_HASH_LENGTH = 30;\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { type SameDomainWindowType } from 'cross-domain-utils/src';\n\ntype RequestOptionsType = {|\n    url : string,\n    method? : string,\n    headers? : { [key : string] : string },\n    json? : $ReadOnlyArray<mixed> | Object,\n    data? : { [key : string] : string },\n    body? : string,\n    win? : SameDomainWindowType,\n    timeout? : number\n|};\n\ntype ResponseType = {|\n    status : number,\n    headers : { [string] : string },\n    body : Object\n|};\n\nconst HEADERS = {\n    CONTENT_TYPE: 'content-type',\n    ACCEPT:       'accept'\n};\n\nconst headerBuilders = [];\n\nfunction parseHeaders(rawHeaders : string = '') : { [string] : string } {\n    const result = {};\n    for (const line of rawHeaders.trim().split('\\n')) {\n        const [ key, ...values ] = line.split(':');\n        result[key.toLowerCase()] = values.join(':').trim();\n    }\n    return result;\n}\n\nexport function request({ url, method = 'get', headers = {}, json, data, body, win = window, timeout = 0 } : RequestOptionsType) : ZalgoPromise<ResponseType> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        if ((json && data) || (json && body) || (data && json)) {\n            throw new Error(`Only options.json or options.data or options.body should be passed`);\n        }\n\n        const normalizedHeaders = {};\n\n        for (const key of Object.keys(headers)) {\n            normalizedHeaders[key.toLowerCase()] = headers[key];\n        }\n\n        if (json) {\n            normalizedHeaders[HEADERS.CONTENT_TYPE] = normalizedHeaders[HEADERS.CONTENT_TYPE] || 'application/json';\n        } else if (data || body) {\n            normalizedHeaders[HEADERS.CONTENT_TYPE] = normalizedHeaders[HEADERS.CONTENT_TYPE] || 'application/x-www-form-urlencoded; charset=utf-8';\n        }\n\n        normalizedHeaders[HEADERS.ACCEPT] = normalizedHeaders[HEADERS.ACCEPT] || 'application/json';\n\n        for (const headerBuilder of headerBuilders) {\n            const builtHeaders = headerBuilder();\n\n            for (const key of Object.keys(builtHeaders)) {\n                normalizedHeaders[key.toLowerCase()] = builtHeaders[key];\n            }\n        }\n\n        const xhr = new win.XMLHttpRequest();\n\n        xhr.addEventListener('load', function xhrLoad() : void {\n\n            const responseHeaders = parseHeaders(this.getAllResponseHeaders());\n\n            if (!this.status) {\n                return reject(new Error(`Request to ${ method.toLowerCase() } ${ url } failed: no response status code.`));\n            }\n            \n            const contentType = responseHeaders['content-type'];\n            const isJSON = contentType && (contentType.indexOf('application/json') === 0 || contentType.indexOf('text/json') === 0);\n            let responseBody = this.responseText;\n\n            try {\n                responseBody = JSON.parse(responseBody);\n            } catch (err) {\n                if (isJSON) {\n                    return reject(new Error(`Invalid json: ${ this.responseText }.`));\n                }\n            }\n\n            const res = {\n                status:  this.status,\n                headers: responseHeaders,\n                body:    responseBody\n            };\n\n            return resolve(res);\n\n        }, false);\n\n        xhr.addEventListener('error', (evt) => {\n            reject(new Error(`Request to ${ method.toLowerCase() } ${ url } failed: ${ evt.toString() }.`));\n        }, false);\n\n        xhr.open(method, url, true);\n\n        for (const key in normalizedHeaders) {\n            if (normalizedHeaders.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, normalizedHeaders[key]);\n            }\n        }\n\n        if (json) {\n            body = JSON.stringify(json);\n        } else if (data) {\n            body = Object.keys(data).map(key => {\n                return `${ encodeURIComponent(key) }=${ data ? encodeURIComponent(data[key]) : '' }`;\n            }).join('&');\n        }\n\n        xhr.timeout = timeout;\n        xhr.ontimeout = function xhrTimeout() {\n            reject(new Error(`Request to ${ method.toLowerCase() } ${ url } has timed out`));\n        };\n\n        xhr.send(body);\n    });\n}\n\nexport function addHeaderBuilder(method : () => { [string] : string }) {\n    headerBuilders.push(method);\n}\n","/* @flow */\n\nexport const LOG_LEVEL = {\n    DEBUG: ('debug' : 'debug'),\n    INFO:  ('info' : 'info'),\n    WARN:  ('warn' : 'warn'),\n    ERROR: ('error' : 'error')\n};\n\nexport const PROTOCOL = {\n    FILE: 'file:'\n};\n","/* @flow */\n\nimport { LOG_LEVEL } from './constants';\n\nexport const AUTO_FLUSH_LEVEL = [ LOG_LEVEL.WARN, LOG_LEVEL.ERROR ];\n\nexport const LOG_LEVEL_PRIORITY = [ LOG_LEVEL.ERROR, LOG_LEVEL.WARN, LOG_LEVEL.INFO, LOG_LEVEL.DEBUG ];\n\nexport const FLUSH_INTERVAL = 60 * 1000;\n\nexport const DEFAULT_LOG_LEVEL : $Values<typeof LOG_LEVEL> = __DEBUG__ ? LOG_LEVEL.DEBUG : LOG_LEVEL.WARN;\n\nexport const AMPLITUDE_URL = 'https://api2.amplitude.com/2/httpapi';\n","/* @flow */\n\nimport { type SameDomainWindowType } from 'cross-domain-utils/src';\n\nimport { AMPLITUDE_URL } from './config';\nimport type { Payload } from './types';\n\ntype CanUseBeaconOptions = {|\n    headers : { [string] : string },\n    enableSendBeacon : boolean\n|};\n\nconst canUseSendBeacon = ({ headers, enableSendBeacon } : CanUseBeaconOptions) : boolean => {\n    const hasHeaders = headers && Object.keys(headers).length;\n    if (window && window.navigator.sendBeacon && !hasHeaders && enableSendBeacon && window.Blob) {\n        return true;\n    }\n\n    return false;\n};\n\nconst isAmplitude = (url : string) : boolean => {\n    if (url === AMPLITUDE_URL) {\n        return true;\n    }\n\n    return false;\n};\n\ntype SendBeaconOptions = {|\n    win : SameDomainWindowType,\n    url : string,\n    data : JSON,\n    useBlob : boolean\n|};\n\nconst sendBeacon = ({ win = window, url, data, useBlob = true } : SendBeaconOptions) : boolean => {\n    try {\n        const json = JSON.stringify(data);\n\n        if (!win.navigator.sendBeacon) {\n            throw new Error(`No sendBeacon available`);\n        }\n\n        if (useBlob) {\n            const blob = new Blob([ json ], { type: 'application/json' });\n            return win.navigator.sendBeacon(url, blob);\n        }\n        \n        return win.navigator.sendBeacon(url, json);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst extendIfDefined = (target : Payload, source : Payload) => {\n    for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n};\n\nexport { canUseSendBeacon, extendIfDefined, isAmplitude, sendBeacon };\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isBrowser, promiseDebounce, noop, safeInterval, objFilter } from 'belter/src';\n\nimport { DEFAULT_LOG_LEVEL, LOG_LEVEL_PRIORITY, AUTO_FLUSH_LEVEL, FLUSH_INTERVAL, AMPLITUDE_URL } from './config';\nimport { LOG_LEVEL, PROTOCOL } from './constants';\nimport { extendIfDefined } from './util';\nimport { type Transport, getHTTPTransport } from './http';\nimport type { Payload } from './types';\n\ntype LoggerOptions = {|\n    url? : string,\n    prefix? : string,\n    logLevel? : $Values<typeof LOG_LEVEL>,\n    transport? : Transport,\n    flushInterval? : number,\n    enableSendBeacon? : boolean,\n    amplitudeApiKey? : string\n|};\n\ntype ClientPayload = Payload;\ntype Log = (name : string, payload? : ClientPayload) => LoggerType; // eslint-disable-line no-use-before-define\ntype Track = (payload : ClientPayload) => LoggerType; // eslint-disable-line no-use-before-define\n\ntype Builder = (Payload) => ClientPayload;\ntype AddBuilder = (Builder) => LoggerType; // eslint-disable-line no-use-before-define\n\nexport type LoggerType = {|\n    debug : Log,\n    info : Log,\n    warn : Log,\n    error : Log,\n\n    track : Track,\n\n    flush : () => ZalgoPromise<void>,\n    immediateFlush : () => ZalgoPromise<void>,\n\n    addPayloadBuilder : AddBuilder,\n    addMetaBuilder : AddBuilder,\n    addTrackingBuilder : AddBuilder,\n    addHeaderBuilder : AddBuilder,\n\n    setTransport : (Transport) => LoggerType,\n    configure : (LoggerOptions) => LoggerType\n|};\n\nexport function Logger({ url, prefix, logLevel = DEFAULT_LOG_LEVEL, transport = getHTTPTransport(), amplitudeApiKey, flushInterval = FLUSH_INTERVAL, enableSendBeacon = false } : LoggerOptions) : LoggerType {\n\n    let events : Array<{| level : $Values<typeof LOG_LEVEL>, event : string, payload : Payload |}> = [];\n    let tracking : Array<Payload> = [];\n\n    const payloadBuilders : Array<Builder> = [];\n    const metaBuilders : Array<Builder> = [];\n    const trackingBuilders : Array<Builder> = [];\n    const headerBuilders : Array<Builder> = [];\n\n    function print(level : $Values<typeof LOG_LEVEL>, event : string, payload : Payload) {\n\n        if (!isBrowser() || !window.console || !window.console.log) {\n            return;\n        }\n\n        if (LOG_LEVEL_PRIORITY.indexOf(level) > LOG_LEVEL_PRIORITY.indexOf(logLevel)) {\n            return;\n        }\n\n        const args = [ event ];\n\n        args.push(payload);\n\n        if (payload.error || payload.warning) {\n            args.push('\\n\\n', payload.error || payload.warning);\n        }\n\n        try {\n            if (window.console[level] && window.console[level].apply) {\n                window.console[level].apply(window.console, args);\n            } else if (window.console.log && window.console.log.apply) {\n                window.console.log.apply(window.console, args);\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    function immediateFlush() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (!isBrowser() || window.location.protocol === PROTOCOL.FILE) {\n                return;\n            }\n\n            if (!events.length && !tracking.length) {\n                return;\n            }\n\n            const meta = {};\n            for (const builder of metaBuilders) {\n                extendIfDefined(meta, builder(meta));\n            }\n\n            const headers = {};\n            for (const builder of headerBuilders) {\n                extendIfDefined(headers, builder(headers));\n            }\n\n            let res;\n\n            if (url) {\n                res = transport({\n                    method: 'POST',\n                    url,\n                    headers,\n                    json:   {\n                        events,\n                        meta,\n                        tracking\n                    },\n                    enableSendBeacon\n                }).catch(noop);\n            }\n\n            if (amplitudeApiKey) {\n                transport({\n                    method:  'POST',\n                    url:     AMPLITUDE_URL,\n                    headers: {},\n                    json:    {\n                        api_key: amplitudeApiKey,\n                        events:  tracking.map((payload : Payload) => {\n                            // $FlowFixMe\n                            return {\n                                event_type:       payload.transition_name || 'event',\n                                event_properties: payload,\n                                ...payload\n                            };\n                        })\n                    },\n                    enableSendBeacon\n                }).catch(noop);\n            }\n\n            events = [];\n            tracking = [];\n\n            return ZalgoPromise.resolve(res).then(noop);\n        });\n    }\n\n    const flush = promiseDebounce(immediateFlush);\n\n    function enqueue(level : $Values<typeof LOG_LEVEL>, event : string, payload : Payload) {\n\n        events.push({\n            level,\n            event,\n            payload\n        });\n\n        if (AUTO_FLUSH_LEVEL.indexOf(level) !== -1) {\n            flush();\n        }\n    }\n\n    function log(level : $Values<typeof LOG_LEVEL>, event : string, payload = {}) : LoggerType {\n\n        if (!isBrowser()) {\n            return logger; // eslint-disable-line no-use-before-define\n        }\n\n        if (prefix) {\n            event = `${ prefix }_${ event }`;\n        }\n\n        const logPayload : Payload = {\n            ...objFilter(payload),\n            timestamp: Date.now().toString()\n        };\n\n        for (const builder of payloadBuilders) {\n            extendIfDefined(logPayload, builder(logPayload));\n        }\n\n        enqueue(level, event, logPayload);\n        print(level, event, logPayload);\n\n        return logger; // eslint-disable-line no-use-before-define\n    }\n\n    function addBuilder(builders, builder) : LoggerType {\n        builders.push(builder);\n        return logger; // eslint-disable-line no-use-before-define\n    }\n\n    function addPayloadBuilder(builder) : LoggerType {\n        return addBuilder(payloadBuilders, builder);\n    }\n\n    function addMetaBuilder(builder) : LoggerType {\n        return addBuilder(metaBuilders, builder);\n    }\n\n    function addTrackingBuilder(builder) : LoggerType {\n        return addBuilder(trackingBuilders, builder);\n    }\n\n    function addHeaderBuilder(builder) : LoggerType {\n        return addBuilder(headerBuilders, builder);\n    }\n\n    function debug(event, payload) : LoggerType {\n        return log(LOG_LEVEL.DEBUG, event, payload);\n    }\n\n    function info(event, payload) : LoggerType {\n        return log(LOG_LEVEL.INFO, event, payload);\n    }\n\n    function warn(event, payload) : LoggerType {\n        return log(LOG_LEVEL.WARN, event, payload);\n    }\n\n    function error(event, payload) : LoggerType {\n        return log(LOG_LEVEL.ERROR, event, payload);\n    }\n\n    function track(payload = {}) : LoggerType {\n        if (!isBrowser()) {\n            return logger; // eslint-disable-line no-use-before-define\n        }\n\n        const trackingPayload : Payload = objFilter(payload);\n\n        for (const builder of trackingBuilders) {\n            extendIfDefined(trackingPayload, builder(trackingPayload));\n        }\n\n        print(LOG_LEVEL.DEBUG, 'track', trackingPayload);\n        tracking.push(trackingPayload);\n\n        return logger; // eslint-disable-line no-use-before-define\n    }\n\n    function setTransport(newTransport : Transport) : LoggerType {\n        transport = newTransport;\n        return logger; // eslint-disable-line no-use-before-define\n    }\n\n    function configure(opts : LoggerOptions) : LoggerType {\n        if (opts.url) {\n            url = opts.url;\n        }\n\n        if (opts.prefix) {\n            prefix = opts.prefix;\n        }\n\n        if (opts.logLevel) {\n            logLevel = opts.logLevel;\n        }\n\n        if (opts.transport) {\n            transport = opts.transport;\n        }\n\n        if (opts.amplitudeApiKey) {\n            amplitudeApiKey = opts.amplitudeApiKey;\n        }\n\n        if (opts.flushInterval) {\n            flushInterval = opts.flushInterval;\n        }\n\n        if (opts.enableSendBeacon) {\n            enableSendBeacon = opts.enableSendBeacon;\n        }\n\n        return logger; // eslint-disable-line no-use-before-define\n    }\n\n    if (isBrowser()) {\n        safeInterval(flush, flushInterval);\n    }\n\n    if (typeof window === 'object') {\n        window.addEventListener('beforeunload', () => {\n            immediateFlush();\n        });\n\n        window.addEventListener('unload', () => {\n            immediateFlush();\n        });\n\n        window.addEventListener('pagehide', () => {\n            immediateFlush();\n        });\n    }\n\n    const logger = {\n        debug,\n        info,\n        warn,\n        error,\n        track,\n        flush,\n        immediateFlush,\n        addPayloadBuilder,\n        addMetaBuilder,\n        addTrackingBuilder,\n        addHeaderBuilder,\n        setTransport,\n        configure\n    };\n\n    return logger;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { request, noop } from 'belter/src';\nimport { isSameDomain, assertSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { canUseSendBeacon, isAmplitude, sendBeacon } from './util';\n\nexport type TransportOptions = {|\n    url : string,\n    method : string,\n    headers : { [string] : string },\n    json : Object,\n    enableSendBeacon? : boolean\n|};\n\nexport type Transport = (TransportOptions) => ZalgoPromise<void>;\n\nexport function getHTTPTransport(httpWin : CrossDomainWindowType = window) : Transport {\n    const win = isSameDomain(httpWin) ? assertSameDomain(httpWin) : window;\n\n    return ({ url, method, headers, json, enableSendBeacon = false } : TransportOptions) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            let beaconResult = false;\n\n            if (canUseSendBeacon({ headers, enableSendBeacon })) {\n                if (isAmplitude(url)) {\n                    beaconResult = sendBeacon({ win, url, data: json, useBlob: false });\n                } else {\n                    beaconResult = sendBeacon({ win, url, data: json, useBlob: true });\n                }\n            }\n\n            return beaconResult ? beaconResult : request({ win, url, method, headers, json });\n        }).then(noop);\n    };\n}\n","/* @flow */\n\nimport { Logger, type LoggerType } from 'beaver-logger/src';\nimport { memoize } from 'belter/src';\n\nimport { getPayPalLoggerUrl } from './domains';\n\ntype GetLogger = () => LoggerType;\n\nexport const getLogger : GetLogger = memoize(() => {\n    return Logger({\n        url: getPayPalLoggerUrl()\n    });\n});\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { request, stringifyError } from 'belter/src';\nimport { type FundingEligibilityType } from '@paypal/sdk-constants/src';\n\nimport { URI } from './config';\nimport { buildPayPalUrl } from './domains';\nimport { getLogger } from './logger';\nimport type { MLContext, Personalization, Extra } from './personalization';\n\nexport const LocationType = {\n    'BEFORE': ('before' : 'before'),\n    'AFTER':  ('after' : 'after'),\n    'INNER':  ('inner' : 'inner')\n};\n\n\nfunction getDefaultVariables<V>() : V {\n    // $FlowFixMe[incompatible-return]\n    return {};\n}\n\nexport function callGraphQL<T, V>({ query, variables = getDefaultVariables(), headers = {} } : {| query : string, variables : V, headers? : { [string] : string } |}) : ZalgoPromise<T> {\n    return request({\n        url:     buildPayPalUrl(URI.GRAPHQL),\n        method:  'POST',\n        json:    {\n            query,\n            variables\n        },\n        headers: {\n            'x-app-name': 'personalization',\n            ...headers\n        }\n    }).then(({ status, body }) => {\n        const errors = body.errors || [];\n\n        if (errors.length) {\n            const message = errors[0].message || JSON.stringify(errors[0]);\n            throw new Error(message);\n        }\n\n        if (status !== 200) {\n            throw new Error(`${ URI.GRAPHQL } returned status ${ status }`);\n        }\n\n        return body.data;\n    });\n}\n\nconst PERSONALIZATION_QUERY = `\n    query GetPersonalization(\n        $clientId: String,\n        $buyerCountry: CountryCodes,\n        $ip: String,\n        $cookies: String,\n        $currency: SupportedCountryCurrencies,\n        $intent: FundingEligibilityIntent,\n        $commit: Boolean,\n        $vault: Boolean,\n        $merchantID: [String],\n        $buttonSessionID: String,\n        $userAgent: String,\n        $locale: LocaleInput!,\n        $label: ButtonLabels,\n        $period: String,\n        $taglineEnabled: Boolean,\n        $renderedButtons: [FundingButtonType]\n        $layout: ButtonLayouts\n        $buttonSize: ButtonSizes\n    ) {\n        checkoutCustomization(\n            clientId: $clientId,\n            merchantId: $merchantID,\n            currency: $currency,\n            commit: $commit,\n            intent: $intent,\n            vault: $vault,\n            buyerCountry: $buyerCountry,\n            ip: $ip,\n            cookies: $cookies,\n            buttonSessionId: $buttonSessionID,\n            userAgent: $userAgent,\n            locale: $locale,\n            buttonLabel: $label,\n            installmentPeriod: $period,\n            taglineEnabled: $taglineEnabled,\n            renderedButtons: $renderedButtons\n            layout: $layout\n            buttonSize: $buttonSize\n        ) {\n            tagline {\n                text\n                tracking {\n                    impression\n                    click\n                }\n            }\n            buttonText {\n                text\n                tracking {\n                    impression\n                    click\n                }\n            }\n            buttonAnimation {\n                id\n                text\n                tracking {\n                    impression\n                    click\n                }\n            }\n        }\n    }\n`;\n\nfunction adaptPersonalizationToExperiments(personalization) : ?$ReadOnlyArray<Personalization> {\n    const personalizations = [];\n\n    Object.keys(personalization).forEach(experiment => {\n        if (personalization[experiment]) {\n            personalizations.push({\n                name:      experiment,\n                tracking:  personalization[experiment] && personalization[experiment].tracking,\n                treatment: {\n                    name:   experiment,\n                    html: {\n                        markup:   '', // pull from personalization repo\n                        selector: '', // pull from personalization repo\n                        location: LocationType.INNER // pull from personalization repo\n                    },\n                    css: '',\n                    js:  ''\n                }\n            });\n        }\n    });\n\n    return personalizations;\n}\n\nexport function getPersonalizations({ mlContext, eligibility, extra } : {| mlContext : MLContext, eligibility? : FundingEligibilityType, extra : Extra |}) : ZalgoPromise<$ReadOnlyArray<Personalization>> {\n    const { userAgent, buyerCountry, locale, clientId, buyerIp: ip, currency, cookies } = mlContext;\n    const { commit, intent, vault, buttonSessionID, renderedButtons, label, period, taglineEnabled, layout, buttonSize } = extra;\n    const variables = {\n        clientId,\n        locale,\n        buyerCountry,\n        currency,\n        intent,\n        commit,\n        vault,\n        ip,\n        cookies,\n        userAgent,\n        buttonSessionID,\n        renderedButtons,\n        label,\n        period,\n        taglineEnabled,\n        layout,\n        buttonSize,\n        eligibility\n    };\n\n    // Placeholder for future API changes\n    if (eligibility) {\n        variables.eligibility = eligibility;\n    } else {\n        delete variables.eligibility;\n    }\n\n    return callGraphQL({\n        query: PERSONALIZATION_QUERY,\n        variables\n    }).then((gqlResult) => {\n        if (!gqlResult || !gqlResult.checkoutCustomization) {\n            throw new Error(`GraphQL checkoutCustomization returned no checkoutCustomization object`);\n        }\n        return adaptPersonalizationToExperiments(gqlResult && gqlResult.checkoutCustomization);\n    }).catch(err => {\n        getLogger().error(`graphql_checkoutCustomization_error`, { err: stringifyError(err) });\n        return ZalgoPromise.reject(err);\n    });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { COMMIT, COUNTRY, CURRENCY, INTENT, type LocaleType, type FundingEligibilityType } from '@paypal/sdk-constants/src';\n\nimport { getPersonalizations, LocationType } from './graphql';\n\ntype Tracking = {|\n    click : string,\n    impression : string\n|};\n\ntype Treatment = {|\n    name : string,\n    html : {|\n        markup : string,\n        selector : string,\n        location : $Values<typeof LocationType>\n    |},\n    css : string,\n    js : string\n|};\n\nexport type Personalization = {|\n    name : string,\n    tracking : Tracking,\n    treatment : Treatment\n|};\n\nexport type MLContext = {|\n    userAgent? : string,\n    buyerCountry : $Values<typeof COUNTRY>,\n    merchantCountry? : $Values<typeof COUNTRY>,\n    locale : LocaleType,\n    clientId : string,\n    buyerIp? : string,\n    currency? : $Values<typeof CURRENCY>,\n    cookies? : string\n|};\n\nexport type Extra = {|\n    intent? : $Values<typeof INTENT>,\n    commit? : $Values<typeof COMMIT>,\n    vault? : boolean,\n    merchantID? : $ReadOnlyArray<string>,\n    buttonSessionID? : string,\n    label? : string,\n    period? : number,\n    taglineEnabled : boolean,\n    renderedButtons? : $ReadOnlyArray<string>,\n    layout? : string,\n    buttonSize? : string\n|};\n\nexport function fetchPersonalizations({ mlContext, eligibility, extra } : {| mlContext : MLContext, eligibility : FundingEligibilityType, extra : Extra |}) : ZalgoPromise<$ReadOnlyArray<Personalization>> {\n    return getPersonalizations({ mlContext, eligibility, extra });\n}\n"],"sourceRoot":""}